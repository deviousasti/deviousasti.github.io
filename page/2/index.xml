<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Asti&#39;s Notes</title>
    <link>/</link>
    <description>Recent content on Asti&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC by Attribution</copyright>
    <lastBuildDate>Sat, 18 Dec 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Decoding a oneof case in nanopb</title>
        <link>/post/nanopb-value/</link>
        <pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate>
        
        <guid>/post/nanopb-value/</guid>
        <description>Asti&#39;s Notes /post/nanopb-value/ -&lt;h2 id=&#34;decoding-callbacks&#34;&gt;Decoding callbacks&lt;/h2&gt;
&lt;p&gt;Say you have a message type with variable fields:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyValue&lt;/span&gt; {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; key     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; value   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This generates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _KeyValue {
    pb_callback_t key;
    pb_callback_t value;
} KeyValue;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Decoding this in nanopb isn&amp;rsquo;t so bad -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;KeyValue &lt;span style=&#34;color:#a6e22e&#34;&gt;decodeKV&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; value)
{
	KeyValue kv;
	kv.key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; readStringCallback(key);
	kv.value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; readStringCallback(value);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; kv;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Call &lt;code&gt;pb_decode&lt;/code&gt; and you&amp;rsquo;re done.&lt;/p&gt;
&lt;h2 id=&#34;the-callback-and-the-union&#34;&gt;The callback and the union&lt;/h2&gt;
&lt;p&gt;If your type happens to be inside a &lt;code&gt;oneof&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;message Request {
	oneof type {
		Version version = 1;
		KeyValue setting = 2;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;suddenly, the &lt;code&gt;KeyValue&lt;/code&gt; struct is in an union type - which itself is a field in another struct.&lt;/p&gt;
&lt;p&gt;Now when you use &lt;code&gt;decodeKV&lt;/code&gt; try to decode &lt;code&gt;Request&lt;/code&gt; (the container message), you will find that nothing happens, and your callbacks are never called. This is because during the decode, the union type itself is initialized and so the &lt;code&gt;pb_callback&lt;/code&gt;s are set to &lt;code&gt;NULL&lt;/code&gt; - no callbacks set, no call back (pardon the alliteration).&lt;/p&gt;
&lt;h2 id=&#34;if-you-dont-succeed-at-first-decode-again&#34;&gt;If you don&amp;rsquo;t succeed at first, decode again&lt;/h2&gt;
&lt;p&gt;For this to work out, we need to create an environment where we decode the inner struct as a standalone message - like in our very first scenario.&lt;/p&gt;
&lt;p&gt;First we need to figure out which was our &lt;code&gt;oneof&lt;/code&gt; case - to be more specific, the message descriptor corresponding to our &lt;code&gt;oneof&lt;/code&gt; case.&lt;/p&gt;
&lt;p&gt;We need a type to collect our findings, so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; pb_union_s
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; uint32_t tag;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; pb_msgdesc_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; submsg_desc;
		pb_istream_t stream;
	} pb_union_t;	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ll put in the full implementation in a gist below, but for now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//iterate and decode tag till we get our union desc 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; pb_union_t &lt;span style=&#34;color:#a6e22e&#34;&gt;getUnionType&lt;/span&gt;(uint8_t buffer[], size_t size);
	
	&lt;span style=&#34;color:#75715e&#34;&gt;//actually decode our inner message
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decodeUnion&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; message, pb_union_t&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; unionType);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;pb_union_t oneof &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getUnionType(packet, packet_size);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;decoding&#34;&gt;Decoding&lt;/h2&gt;
&lt;p&gt;Now we have our union message type, so - now what?
Now you can check when &lt;code&gt;oneof.tag&lt;/code&gt; matches &lt;code&gt;Request_setting_tag&lt;/code&gt; and we have all the information we need to decode &lt;code&gt;KeyValue&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;KeyValue kv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; decodeKV(key, value);
decodeUnion(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;kv, oneof);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and that&amp;rsquo;s it really.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/deviousasti/ced9041be0c54829a69e9cc18a39f7c4.js&#34;&gt;&lt;/script&gt;

- /post/nanopb-value/ - CC by Attribution</description>
        </item>
    
    
    
        <item>
        <title>Sync git modules to .gitmodules</title>
        <link>/post/powershell-git-sync/</link>
        <pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate>
        
        <guid>/post/powershell-git-sync/</guid>
        <description>Asti&#39;s Notes /post/powershell-git-sync/ -&lt;h2 id=&#34;gitmodules-is-not-git-submodules&#34;&gt;.gitmodules is not git submodules&lt;/h2&gt;
&lt;p&gt;A  &lt;code&gt;.gitmodules&lt;/code&gt; file is sort of indicative - it&amp;rsquo;s not what actually is being tracked by Git.
When you start a new project, and you have to include a bunch of submodules, you may think of starting off by copying and editing a &lt;code&gt;.gitmodules&lt;/code&gt; file with all the submodules you want, but that literally does nothing.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll find out that you have to &lt;code&gt;git submodule add&lt;/code&gt; everything by hand.
Well, we could just automate that.&lt;/p&gt;
&lt;h2 id=&#34;reading-gitmodules&#34;&gt;Reading .gitmodules&lt;/h2&gt;
&lt;p&gt;Git has some commands to help us read &lt;code&gt;.gitmodules&lt;/code&gt;.
It&amp;rsquo;s behind &lt;code&gt;git config --file&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get all the keys first.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --file .gitmodules --list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That was easy.  We got a list of keys.
And to get a value for a specific key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; lookup($key, $defaultValue = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) {        
	$value = git config -&lt;span style=&#34;color:#f92672&#34;&gt;-file&lt;/span&gt; $gitmodules --get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$key&amp;#34;&lt;/span&gt; 2&amp;gt;&amp;amp;1 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($LASTEXITCODE &lt;span style=&#34;color:#f92672&#34;&gt;-ne&lt;/span&gt; 0) { $defaultValue } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; { $value }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;extracting-submodules&#34;&gt;Extracting submodules&lt;/h2&gt;
&lt;p&gt;We just get a list of the unique submodules, and lookup the keys for &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;branch&lt;/code&gt; (if it exists).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;all | 
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; { $_ -split &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\.&amp;#34;&lt;/span&gt;  | select -Index 1 } | 
select -Unique |
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;[pscustomobject]&lt;/span&gt;@{ 
	Path = lookup &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submodule.$_.path&amp;#34;&lt;/span&gt;; 
	Url = lookup &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submodule.$_.url&amp;#34;&lt;/span&gt;;  
	Branch = lookup &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submodule.$_.branch&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master&amp;#34;&lt;/span&gt;;
}} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That gives us something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Path               Url                                                      Branch  
----               ---                                                      ------  
stm32-core         https://git.webyfy.com/webyfylabs/core-STM32.git         STM32F03
src/rtt            https://git.webyfy.com/webyfylabs/rtt.git                master  
src/node           https://git.webyfy.com/webyfylabs/node-core.git          master  
src/sens           https://git.webyfy.com/webyfylabs/sens-core.git          master  
rtt                https://git.webyfy.com/webyfylabs/rtt.git                master  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pretty neat.&lt;/p&gt;
&lt;h2 id=&#34;std-from-powershell&#34;&gt;std from PowerShell&lt;/h2&gt;
&lt;p&gt;While all that remains is call &lt;code&gt;git submodule add&lt;/code&gt; with the parameters we just found, you will quickly run into a problem:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git : Cloning into &#39;D:/Experiments/Subtest/src/rtt&#39;...
At D:\Experiments\Subtest\SyncSubmodules.ps1:29 char:9
+         git submodule add $sub.Url $sub.Path
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (Cloning into &#39;D...est/src/rtt&#39;...:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is actually no error here - PowerShell thinks that any output in &lt;code&gt;stderr&lt;/code&gt; is &lt;em&gt;due&lt;/em&gt; to an error.
Even if we redirect &lt;code&gt;stderr&lt;/code&gt;, the &lt;code&gt;stderr&lt;/code&gt; stream will end up propagating downstream. In order to avoid this, we redirect then reproject every element to an &lt;code&gt;stdout&lt;/code&gt;  stream.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2&amp;gt;&amp;amp;1 | foreach { &amp;quot;$_&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So our add becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git submodule add $sub.Url $sub.Path 2&amp;gt;&amp;amp;1 | foreach { &amp;quot;$_&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that we all that pieces, we can make the module.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/deviousasti/b23160ef21d16faa3b8668ae11a20ed2.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage:&lt;/h2&gt;
&lt;p&gt;cd to path with &lt;code&gt;.gitmodules&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Sync-Submodules
&lt;/code&gt;&lt;/pre&gt;- /post/powershell-git-sync/ - CC by Attribution</description>
        </item>
    
    
    
        <item>
        <title>An Html Imports Bundler</title>
        <link>/post/html-imports/</link>
        <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
        
        <guid>/post/html-imports/</guid>
        <description>Asti&#39;s Notes /post/html-imports/ -&lt;p&gt;Once upon a time HTML imports was marketed as #include for the web and the best thing ever invented.
And it was a great idea.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTML Imports is a way to include HTML documents in other HTML documents. You&amp;rsquo;re not limited to markup either. An import can also include CSS, JavaScript, or anything else an .html file can contain. In other words, this makes imports a fantastic tool for loading related HTML/CSS/JS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As with all great ideas, it was just killed off. In Chrome 73, all support will be removed and it will be as it had never existed. Well, at least there was some tool to transform all these imports into a single page with Polymer&amp;rsquo;s &lt;a href=&#34;https://github.com/Polymer/vulcanize&#34;&gt;Vulcanize&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But.. that was deprecated and moved to &lt;a href=&#34;https://github.com/Polymer/polymer-bundler&#34;&gt;Polymer Bundler&lt;/a&gt;. And then that was moved to Polymer&amp;rsquo;s monorepo with CLI tools. And&amp;hellip; it&amp;rsquo;s still broken. And unmaintained.&lt;/p&gt;
&lt;p&gt;The original bundler repo had 1k commits and 20k lines of typescript.
Can we just get the most of the functionality with our own bundler in as few lines of code as possible?&lt;/p&gt;
&lt;h2 id=&#34;parsing-the-html&#34;&gt;Parsing the Html&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s two candiates. &lt;code&gt;FSharp.Data&lt;/code&gt; and &lt;code&gt;HtmlAgilityPack&lt;/code&gt;.
Both are good enough for parsing, but we need to modify the DOM tree and write the output, which  &lt;code&gt;FSharp.Data&lt;/code&gt; doesn&amp;rsquo;t support.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll need the DOM and the source file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type ImportDocument = { document: HtmlDocument; file: string }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and to parse:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; scanFile file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; 
       &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; doc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;createDoc &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;File.ReadAllText file&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
       Some &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; document &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; doc&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; ex &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
       warnWith &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sprintf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not parse: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%A&amp;#34;&lt;/span&gt; file ex&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it for parsing an html file.&lt;/p&gt;
&lt;h2 id=&#34;matching-our-targets&#34;&gt;Matching our targets&lt;/h2&gt;
&lt;p&gt;The basic premise is to match an import node&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imports.html&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and repeatedly unfold it every time you encounter another import node.
Additionally, we must rewrite &lt;code&gt;script&lt;/code&gt; and &lt;code&gt;stylesheet&lt;/code&gt; paths to the new relative path.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll write some partial active patterns for those.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; someIf condition value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; condition &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; Some value &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; None
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(|&lt;/span&gt;Import&lt;span style=&#34;color:#f92672&#34;&gt;|_|)&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; someIf &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; attr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rel&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;import&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; node
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(|&lt;/span&gt;Script&lt;span style=&#34;color:#f92672&#34;&gt;|_|)&lt;/span&gt; node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; someIf &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;script&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; attr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; node
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(|&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;|_|)&lt;/span&gt; node  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; someIf &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; attr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rel&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;mapping-our-paths&#34;&gt;Mapping our paths&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s no good idiomatic way to use &lt;code&gt;Path&lt;/code&gt; from within F#, so we&amp;rsquo;ll write us a few helpers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    let fullPath = Path.GetFullPath
    let parentDir file = 
        Path.GetDirectoryName(fullPath file)
    let relativeTo file other = 
        Path.Combine((parentDir file), other) |&amp;gt;  fullPath
    let partialRelativeTo root file =
        Path.GetRelativePath((parentDir root), file).Replace(&amp;quot;\\&amp;quot;, &amp;quot;/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;unfolding-an-import&#34;&gt;Unfolding an import&lt;/h2&gt;
&lt;p&gt;Unfolding is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If it&amp;rsquo;s already imported, avoid&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If it&amp;rsquo;s an import, recursively unfold.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If it&amp;rsquo;s a &lt;code&gt;script&lt;/code&gt; or &lt;code&gt;style&lt;/code&gt;, rewrite the path&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If it&amp;rsquo;s none of the above, just include the element unchanged&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; unfoldImports source root hasResource &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; rec unfold source rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; importfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; source &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; attr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; relativeTo rel
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; relativeToImport rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rel &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; relativeTo importfile &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; partialRelativeTo root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;file
        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; imported &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; hasResource importfile &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; None &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; scanFile importfile 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; imported &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Some&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;imported&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;                     
            seq &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; elem &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; imported&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;document &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; rootNode &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; children &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;    
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; elem &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Import&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elem&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; unfold elem importfile
                    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Script&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elem&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; elem &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; attrMap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt; relativeToImport
                    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Style&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elem&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; elem &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; attrMap &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt; relativeToImport
                    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; elem
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Seq.empty
          
    unfold source root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;file

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;injecting-our-imports&#34;&gt;Injecting our imports&lt;/h2&gt;
&lt;p&gt;We need to insert each element at the site of the import, however, simple using &lt;code&gt;importNode.InsertAfter&lt;/code&gt; reverses our import order. A better solution is to repeatedly fold the newly inserted element:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;Seq.fold &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cur&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; HtmlNode&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; elem &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ParentNode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;InsertAfter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elem&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; source
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;so the entire replace all would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; replaceImports doc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashSet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;_&amp;gt;&lt;/span&gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; add &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; set&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Add
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; replaceImport source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
        unfoldImports source doc add
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.fold &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cur&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; HtmlNode&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; elem &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ParentNode&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;InsertAfter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elem&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cur&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; source       
        &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; ignore
        source&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Remove()            
            
    doc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;document
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; rootNode
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; descendants &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.choose &lt;span style=&#34;color:#f92672&#34;&gt;(|&lt;/span&gt;Import&lt;span style=&#34;color:#f92672&#34;&gt;|_|)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.toArray
    &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; Seq.iter replaceImport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;saving-the-output&#34;&gt;Saving the output&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s not much else to do than just load up and file and call &lt;code&gt;replaceImports&lt;/code&gt; on it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; scanFile input &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; None &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; printfn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input file was invalid&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Some &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; 
    replaceImports root
    root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;document&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Save&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;output&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s all there is to it.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the full source. The main bits are in &lt;code&gt;Program.fs&lt;/code&gt;, the &lt;code&gt;Html.fs&lt;/code&gt; is just a small wrapper to make &lt;code&gt;AgilityPack&lt;/code&gt; more like &lt;code&gt;FSharp.Data&lt;/code&gt;.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/deviousasti/b63f98b66401676511f00148ae38ce8f.js&#34;&gt;&lt;/script&gt;

- /post/html-imports/ - CC by Attribution</description>
        </item>
    
    
    
        <item>
        <title>Getting the last value from an Observable when it fails</title>
        <link>/post/rx-last-value/</link>
        <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
        
        <guid>/post/rx-last-value/</guid>
        <description>Asti&#39;s Notes /post/rx-last-value/ -&lt;h2 id=&#34;the-rx-contract&#34;&gt;The Rx Contract&lt;/h2&gt;
&lt;p&gt;The Rx contract is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;OnNext* (OnError(e)|OnCompleted)+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Unfortunately, an &lt;code&gt;OnError&lt;/code&gt; signals the pipeline to be torn down immediately - throwing away that last, possibly useful result.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s have a simple source which produces:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;OnNext(1), OnNext(2), ... OnNext(10), OnError(ex)
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; source = 
    Observable.Range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;).Concat(Observable.Throw&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Exception()));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if we use an accumulating operator like &lt;code&gt;Buffer&lt;/code&gt;, or &lt;code&gt;ToArray&lt;/code&gt; we lose any values accumulated just before the error occured.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;source
.Buffer(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
.Subscribe(list =&amp;gt; Console.WriteLine(String.Join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, list)));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before the inevitable error, this prints&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1,2,3,4
5,6,7,8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&amp;rsquo;re missing the last two values. And if we try&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;source.LastAsync().Subscribe(Console.WriteLine);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We get absolutely nothing.&lt;/p&gt;
&lt;h2 id=&#34;how-to-turn-around-an-error&#34;&gt;How to turn around an error&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Buffer&lt;/code&gt; and &lt;code&gt;Last&lt;/code&gt;, and &lt;code&gt;ToArray&lt;/code&gt; would work with the last values, if they got an &lt;code&gt;OnCompleted&lt;/code&gt; instead. As it turns out, there is an Rx operator which can let us know if there&amp;rsquo;s an&lt;code&gt;OnError&lt;/code&gt; on the way without tearing down the pipeline.&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;Materialize&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Materialize&lt;/code&gt; transforms a sequence into a sequence of notifications of the original sequence. And when the sequence has an error, the materialized sequence completes normally - because the error is also materialized.&lt;/p&gt;
&lt;p&gt;So now we can transform our earlier example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;source
.Materialize()
.Buffer(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
.Subscribe(list =&amp;gt; Console.WriteLine(String.Join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, list)));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;OnNext(1),OnNext(2),OnNext(3),OnNext(4)
OnNext(5),OnNext(6),OnNext(7),OnNext(8)
OnNext(9),OnNext(10),OnError(System.Exception)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Much better. We didn&amp;rsquo;t drop anything. If we just want the values, we can clean it up:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;source
.Materialize()
.Buffer(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
.Select(list =&amp;gt; list.Where(l =&amp;gt; l.HasValue).Select(l =&amp;gt; l.Value))
.Subscribe(list =&amp;gt; Console.WriteLine(String.Join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, list)));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1,2,3,4
5,6,7,8
9,10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same solution works for &lt;code&gt;ToArray&lt;/code&gt;.&lt;/p&gt;
- /post/rx-last-value/ - CC by Attribution</description>
        </item>
    
    
    
        <item>
        <title>The various Schedulers in Rx</title>
        <link>/post/rx-schedulers/</link>
        <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
        
        <guid>/post/rx-schedulers/</guid>
        <description>Asti&#39;s Notes /post/rx-schedulers/ -&lt;h2 id=&#34;schedulers-in-rx&#34;&gt;Schedulers in Rx&lt;/h2&gt;
&lt;p&gt;Schedulers abstract away concurrency from operators.
A scheduler decides what order &amp;ldquo;thunks&amp;rdquo; (a unit of work) execute in, and how time &lt;em&gt;flows&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are a number of scheduler implementations for doing work on diverse models of concurrency.
Rx is very preferential to single-threadedness, and opposed to being multi-threaded out of the box.&lt;/p&gt;
&lt;p&gt;Most of the time, you don&amp;rsquo;t need to worry about it, and you can go with the reasonable defaults. But very rarely, (and especially if you break the Observable contract), you end up with out-of-order notifications, &lt;a href=&#34;http://en.wikipedia.org/wiki/Deadlock&#34;&gt;deadlocks&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Deadlock#Livelock&#34;&gt;livelocks&lt;/a&gt; or things lost to the void.&lt;/p&gt;
&lt;h2 id=&#34;immediatescheduler&#34;&gt;ImmediateScheduler&lt;/h2&gt;
&lt;p&gt;This is the simplest of the lot. It&amp;rsquo;s essentially:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Schedule(action) =&amp;gt; action()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s why it&amp;rsquo;s&amp;hellip; immediate. This is one of the most used schedulers, because there can be context switch, and the more reasonable everything behaves.&lt;/p&gt;
&lt;h2 id=&#34;currentthreadscheduler&#34;&gt;CurrentThreadScheduler&lt;/h2&gt;
&lt;p&gt;This is similar to `Immediate with a not-so-subtle difference:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Schedule(action, delay) =&amp;gt; 
	if (delay &amp;gt; 0 )
		sleep(delay)
		
	if (nothing is running) 
		action() 
		dequeue()
     else 
     	enqueue(action)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To be more exact, it will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run a thunk immediately&lt;/li&gt;
&lt;li&gt;If a thunk is scheduled for &lt;code&gt;t&lt;/code&gt; seconds later, it will sleep for &lt;code&gt;t&lt;/code&gt; seconds&lt;/li&gt;
&lt;li&gt;If a thunk is already running, it will be added to a queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As can be seen from this example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;CurrentThreadScheduler.Instance.Schedule(() =&amp;gt;
{
	CurrentThreadScheduler.Instance.Schedule(() =&amp;gt; Console.WriteLine(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
    Console.WriteLine(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This prints &lt;code&gt;2 1&lt;/code&gt;. Using &lt;code&gt;ImmediateScheduler&lt;/code&gt; here would give you &lt;code&gt;1 2&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;eventloopscheduler&#34;&gt;EventLoopScheduler&lt;/h2&gt;
&lt;p&gt;Units of work are scheduled in an event-loop running on a single dedicated thread. Internally, it&amp;rsquo;s a priority queue dispatched by the worker thread. Technically, it&amp;rsquo;s two queues - one for immediate, and one for time-scheduled items.&lt;/p&gt;
&lt;p&gt;As with other event loops, this has the strongest guarantee of serialized notifications.
If encounter heisenbugs related to the order of execution, this is the way to go. The caveat is that it&amp;rsquo;s single threaded, so any blocking work locks up the scheduler.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Schedule(action, duetime) =&amp;gt; 
	if (duetime &amp;gt; 0) 
		time_enqueue(action, duetime)
     else 
		ready_enqueue(action)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;newthreadscheduler&#34;&gt;NewThreadScheduler&lt;/h2&gt;
&lt;p&gt;This is conceptually easy to understand - it creates a new thread for every item of work.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Schedule(action) =&amp;gt; new Thread(action).Start()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Threads aren&amp;rsquo;t &lt;em&gt;that&lt;/em&gt; expensive for modern machines, but why would you need this scheduler?
If you have a really long running work function, on the order of minutes to hours, this is better than locking up a thread in one of the thread pools.&lt;/p&gt;
&lt;p&gt;If you happen to pass in an item scheduled in the future though, it creates an &lt;code&gt;EventLoopScheduler&lt;/code&gt; and uses that.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Schedule(action, delay) =&amp;gt; new EventLoopScheduler().Schedule(action, delay)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;threadpoolscheduler&#34;&gt;ThreadPoolScheduler&lt;/h2&gt;
&lt;p&gt;As its name implies. each unit of work is scheduled on the &lt;code&gt;ThreadPool&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Schedule(action) =&amp;gt; ThreadPool.QueueUserWorkItem(action)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is mostly to support platforms where only the thread pool is available - if your platform has support for tasks, (it almost certainly does) - prefer the &lt;code&gt;TaskPoolScheduler&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are debugging tasks, and want to isolate some portion of your pipeline, this is useful.&lt;/p&gt;
&lt;h2 id=&#34;taskpoolscheduler&#34;&gt;TaskPoolScheduler&lt;/h2&gt;
&lt;p&gt;Schedules an unit of work on the task pool, using the Tasks API.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Schedule(action) =&amp;gt; TaskFactory.StartNew(action)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is one of the more optimized schedulers given its frequent use, and as with tasks, prefer it for short units of work.
Still don&amp;rsquo;t arbitrarily use it for everything - &lt;code&gt;Immediate&lt;/code&gt; is orders of magnitude faster with much less GC.&lt;/p&gt;
&lt;h2 id=&#34;defaultscheduler&#34;&gt;DefaultScheduler&lt;/h2&gt;
&lt;p&gt;This is a platform specific scheduler implementation which calls uses the platform&amp;rsquo;s implementation of &lt;code&gt;IConcurrencyAbstractionLayer&lt;/code&gt;. The implementation is defined in &lt;code&gt;System.Reactive.PlatformServices&lt;/code&gt;, which might vary depending on the target.&lt;/p&gt;
&lt;p&gt;For almost all platforms, the abstraction layer in use is based on the &lt;code&gt;ThreadPool&lt;/code&gt;.
&lt;code&gt;Scheduler.Default&lt;/code&gt; returns the singleton instance of this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DefaultScheduler Default =&amp;gt; DefaultScheduler.Instance;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As before, prefer &lt;code&gt;TaskPoolScheduler&lt;/code&gt;.&lt;/p&gt;
- /post/rx-schedulers/ - CC by Attribution</description>
        </item>
    
    
    
        <item>
        <title>Material Icons in WPF</title>
        <link>/post/wpf-icon-font/</link>
        <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
        
        <guid>/post/wpf-icon-font/</guid>
        <description>Asti&#39;s Notes /post/wpf-icon-font/ -&lt;h2 id=&#34;icon--fonts-with-ligatures&#34;&gt;Icon  Fonts with ligatures&lt;/h2&gt;
&lt;p&gt;The key is using icon fonts with &lt;a href=&#34;https://en.wikipedia.org/wiki/Orthographic_ligature&#34; title=&#34;Orthographic ligature&#34;&gt;ligatures&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This makes usage incredibly easy because you can directly use a sensible &lt;em&gt;name&lt;/em&gt; instead of adding an extra resource for indirection of Unicode characters.&lt;/p&gt;
&lt;h2 id=&#34;step--1&#34;&gt;Step  1&lt;/h2&gt;
&lt;p&gt;Download the icon font from &lt;a href=&#34;https://material.io/resources/icons/&#34;&gt;https://material.io/resources/icons/&lt;/a&gt; (or another resource)&lt;/p&gt;
&lt;p&gt;WPF supports both True Type Fonts (TTF) and Open Type Fonts (OTF).&lt;/p&gt;
&lt;p&gt;Extract the included &lt;code&gt;ttf&lt;/code&gt; file from the archive. You can also download it &lt;a href=&#34;/fonts/MaterialIcons-Regular.ttf&#34; title=&#34;Download MaterialIcons-Regular.ttf from here&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-2&#34;&gt;Step 2&lt;/h2&gt;
&lt;p&gt;Add to your project under any subfolder. Here I&amp;rsquo;m calling it &lt;code&gt;/Fonts&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/wpf-add-font1.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;In the file properties, set the build action to &lt;code&gt;Resource&lt;/code&gt;, and Copy to &lt;code&gt;Copy if newer&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/wpf-add-font2.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;step-3&#34;&gt;Step 3&lt;/h2&gt;
&lt;p&gt;You can now reference your font using &lt;code&gt;./Fonts/#&amp;lt;font name&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In your &lt;code&gt;App.xaml&lt;/code&gt;, add a resource - this makes it easy to swap out fonts later.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xaml&#34; data-lang=&#34;xaml&#34;&gt;&amp;lt;Application x:Class=&amp;quot;my.App&amp;quot;
             xmlns=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;
             xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;
             xmlns:local=&amp;quot;clr-namespace:my&amp;quot;
             StartupUri=&amp;quot;MainWindow.xaml&amp;quot;&amp;gt;
    &amp;lt;Application.Resources&amp;gt;
        &amp;lt;FontFamily x:Key=&amp;quot;IconFont&amp;quot;&amp;gt;./Fonts/#Material Icons&amp;lt;/FontFamily&amp;gt;        
    &amp;lt;/Application.Resources&amp;gt;
&amp;lt;/Application&amp;gt;		
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;The build tool treats it as an embedded font, so use the font family name, and not the font&amp;rsquo;s file name.&lt;/p&gt;
&lt;h2 id=&#34;step-3-1&#34;&gt;Step 3&lt;/h2&gt;
&lt;p&gt;Use it any where by setting &lt;code&gt;FontFamily&lt;/code&gt;, and the &lt;code&gt;Content&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FontFamily=&amp;quot;{StaticResource IconFont}&amp;quot; Content=&amp;quot;icon_name&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pick any icon from the set.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/wpf-add-font3.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xaml&#34; data-lang=&#34;xaml&#34;&gt;&amp;lt;Button FontFamily=&amp;quot;{StaticResource IconFont}&amp;quot; Foreground=&amp;quot;Red&amp;quot;&amp;gt;favorite&amp;lt;/Button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img src=&#34;/images/wpf-add-font4.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;And that&amp;rsquo;s it!&lt;/p&gt;
- /post/wpf-icon-font/ - CC by Attribution</description>
        </item>
    
    
    
        <item>
        <title>Run a PowerShell script for every .NET application crash</title>
        <link>/post/powershell-tasks/</link>
        <pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>/post/powershell-tasks/</guid>
        <description>Asti&#39;s Notes /post/powershell-tasks/ -&lt;p&gt;How do you run a script for every application crash without attaching the debugger or some complicated mess? It&amp;rsquo;s easy enough to write a simple script which checks for the life of the process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;($(ps taskmgr*) &lt;span style=&#34;color:#f92672&#34;&gt;-ne&lt;/span&gt; $null) 
{
  sleep 1  
}

echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It&amp;#39;s dead, Jim!&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But that doesn&amp;rsquo;t give us the stack-trace, plus this script has to have a longer life-time than the process you&amp;rsquo;re monitoring.&lt;/p&gt;
&lt;h2 id=&#34;enter-the-event-log&#34;&gt;Enter The Event Log&lt;/h2&gt;
&lt;p&gt;An application crash with an unhandled exception always writes to the Application event log. If we could run a task for that, we&amp;rsquo;re half-way done.&lt;/p&gt;
&lt;p&gt;And it turns out you can have a scheduled task for exactly that, triggered by an event log item. But adding one is a little involved, since we need some extra query variables to get us the name and stack-trace.&lt;/p&gt;
&lt;h3 id=&#34;scheduled-task&#34;&gt;Scheduled Task&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested, the query is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;QueryList&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Query&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Path=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Application&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Select&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Path=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Application&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
            *[System[Provider[@Name=&amp;#39;.NET Runtime&amp;#39;] and EventID=1026]]	             &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Select&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Query&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/QueryList&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We additionally need a set of &lt;code&gt;ValueQueries&lt;/code&gt; (see lines 7-11).&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s much easier to download the Scheduled Task Xml, and import it in.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/deviousasti/03c735687bb076a4f8e214073868958c.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;the-powershell-side-of-things&#34;&gt;The PowerShell side of things&lt;/h2&gt;
&lt;p&gt;The task trigger can be called with named variables we set up in the &lt;code&gt;ValueQueries&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;powershell Trigger.ps1 -eventRecordID $(eventRecordID) -eventChannel $(eventChannel)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that we have the event id in our script, we can query the log to get back our stack-trace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;param&lt;/span&gt;($eventRecordID, $eventChannel = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Application&amp;#34;&lt;/span&gt;)

$event = Get-WinEvent -LogName $eventChannel -FilterXPath &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;QueryList&amp;gt;&amp;lt;Query Id=&amp;#39;0&amp;#39; Path=&amp;#39;$eventChannel&amp;#39;&amp;gt;&amp;lt;Select Path=&amp;#39;$eventChannel&amp;#39;&amp;gt;*[System[(EventRecordID=$eventRecordID)]]&amp;lt;/Select&amp;gt;&amp;lt;/Query&amp;gt;&amp;lt;/QueryList&amp;gt;&amp;#34;&lt;/span&gt;

$stackTrace = $event.Message

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($stackTrace &lt;span style=&#34;color:#f92672&#34;&gt;-match&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Exception&amp;#34;&lt;/span&gt;)
{
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error Thrown in Application&amp;#34;&lt;/span&gt; 
    $stackTrace &amp;gt; trace.txt
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example will just log the stack-trace to &lt;code&gt;trace.txt&lt;/code&gt; every time an application crashes. Of course, you can take any action, such as even mailing you when there&amp;rsquo;s a crash with &lt;code&gt;Send-MailMessage&lt;/code&gt;.&lt;/p&gt;
- /post/powershell-tasks/ - CC by Attribution</description>
        </item>
    
    
    
        <item>
        <title>Datasheet to symbol</title>
        <link>/post/fast-part-altium/</link>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>/post/fast-part-altium/</guid>
        <description>Asti&#39;s Notes /post/fast-part-altium/ -&lt;p&gt;Don&amp;rsquo;t want to spend 20 minutes copy-pasting bits and pieces of the datasheet into a schematic symbol? This is for you.&lt;/p&gt;
&lt;h3 id=&#34;step-1&#34;&gt;Step 1&lt;/h3&gt;
&lt;p&gt;Open the datasheet PDF in a word processor. &lt;a href=&#34;/images/fastsymbol-step1.jpg&#34;&gt;See image&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;T	his is optional, but highly recommended, because PDFs don&amp;rsquo;t have a flowing layout, and it is important that we have flow in this situation. If you&amp;rsquo;re using a web datasheet, you can skip this step. You could also use something like &lt;a href=&#34;https://tabula.technology&#34;&gt;Tabula&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll be using the &lt;a href=&#34;http://www.ti.com/lit/ds/symlink/tpa3137d2.pdf&#34;&gt;TPA3137D2&lt;/a&gt; (6-W Inductor Free Stereo (BTL) Class-D Audio Amplifier) as an example here.&lt;/p&gt;
&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;
&lt;p&gt;Copy the pin function table to a spreadsheet.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/fastsymbol-step2.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Split out the rows for the common pins, and extra numbers for thermal pads:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/fastsymbol-step21.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;If you want pin direction, change the IO column to one of &lt;code&gt;Input&lt;/code&gt;, &lt;code&gt;Output&lt;/code&gt; or &lt;code&gt;Power&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;=IF(C1 = &amp;quot;I&amp;quot;, &amp;quot;Input&amp;quot;, IF(C1 = &amp;quot;O&amp;quot;, &amp;quot;Output&amp;quot;, IF(C1 = &amp;quot;P&amp;quot;, &amp;quot;Power&amp;quot;, &amp;quot;Passive&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;step-3&#34;&gt;Step 3&lt;/h3&gt;
&lt;p&gt;With a schematic library open, open &lt;strong&gt;Tools &amp;gt; Symbol Wizard&lt;/strong&gt;
Copy the entire sheet from the spreadsheet, and &lt;em&gt;Smart Paste&lt;/em&gt; (&lt;code&gt;Ctrl + Shift + V&lt;/code&gt;) into the Wizard&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/fastsymbol-step3.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Select the corresponding column for Display Name, Designator, Electrical Type (optional), and Description&lt;/p&gt;
&lt;p&gt;Click &lt;code&gt;Paste&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Since this is a dual in-line Package (SSOP-28), I will choose the layout style to be dual in-line (see below)&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/fastsymbol-step31.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Hit &lt;code&gt;Place&lt;/code&gt;. And that&amp;rsquo;s it. The final result should look like this:
&lt;figure&gt;&lt;img src=&#34;/images/fastsymbol-step4.jpg&#34;/&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Each pin should have the correct electrical type and the description.&lt;/p&gt;
- /post/fast-part-altium/ - CC by Attribution</description>
        </item>
    
    
    
        <item>
        <title>Visibility in F#</title>
        <link>/post/visibility-fsharp/</link>
        <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
        
        <guid>/post/visibility-fsharp/</guid>
        <description>Asti&#39;s Notes /post/visibility-fsharp/ -&lt;h2 id=&#34;let-vs-member-assignments&#34;&gt;let vs. member assignments&lt;/h2&gt;
&lt;p&gt;What&amp;rsquo;s the difference between writing &lt;code&gt;let&lt;/code&gt; in a type vs. writing &lt;code&gt;member&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;For starters, there&amp;rsquo;s not a huge difference.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; mutable lastTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateTime.MinValue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; DateTime lastTime = DateTime.MinValue;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;let mutable&lt;/code&gt; resolves to an internal field.&lt;/p&gt;
&lt;p&gt;As you may already know,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; firstTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateTime.MinValue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;always stays in the scope of the constructor, unless referenced outside.
Equivalent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt;
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Test()
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; firstTime = DateTime.MinValue;
		}
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Referencing it in a member lifts it to be a field.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; firstTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateTime.MinValue
    &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; this.&lt;span style=&#34;color:#a6e22e&#34;&gt;getFirst&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; firstTime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; DateTime firstTime = DateTime.MinValue;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DateTime getFirst() =&amp;gt; firstTime;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;let-vs-member-functions&#34;&gt;let vs. member functions&lt;/h2&gt;
&lt;p&gt;For functions, the behavior is similar, except using &lt;code&gt;member&lt;/code&gt; makes it public by default.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; getFirst() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; firstTime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;becomes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; DateTime getFirst() =&amp;gt; firstTime;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; this.&lt;span style=&#34;color:#a6e22e&#34;&gt;getFirst&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; firstTime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;becomes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DateTime getFirst() =&amp;gt; firstTime;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using &lt;code&gt;member private&lt;/code&gt; changes visibility back to &lt;code&gt;internal&lt;/code&gt; (not &lt;code&gt;private&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;These two statements are generated IL-wise, identical:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; firstTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateTime.MinValue
&lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;firstTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateTime.MinValue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;there-is-no-protected&#34;&gt;There is no protected&lt;/h2&gt;
&lt;p&gt;If you have a protected virtual method, the IL method attributes would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PrivateScope, Family, Virtual, HideBySig
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;F# has no concept of &lt;code&gt;family&lt;/code&gt; or &lt;code&gt;protected&lt;/code&gt;. The CLI compiled form of all non-public entities is &lt;em&gt;internal&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you override a member which was &lt;code&gt;protecte&lt;/code&gt;, it becomes &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the F# 4.1 Spec, section 10.5:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;accessibility-annotations&#34;&gt;Accessibility Annotations&lt;/h3&gt;
&lt;p&gt;The table lists the accessibilities that can appear in user code:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No restrictions on access.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;private&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Access is permitted only from the enclosing type, module, or namespace
declaration group.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;internal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Access is permitted only from within the enclosing assembly, or from assemblies whose name is listed using the
InternalsVisibleTo attribute in the current assembly.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The family and protected specifications are not supported in this version of the F# language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;member-or-let&#34;&gt;member or let?&lt;/h2&gt;
&lt;p&gt;For using F# in an idiomatic way, &lt;code&gt;let&lt;/code&gt; is the way to go.
If cross-language compatibility is important to you, use &lt;code&gt;member&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;member&lt;/code&gt; also lets you use functions out of order, if that is important to you.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fsharp&#34; data-lang=&#34;fsharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Test&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; mutable firstTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateTime.MinValue
    &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; this.&lt;span style=&#34;color:#a6e22e&#34;&gt;isValidDate&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 
    	this&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getFirst() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; DateTime.MinValue &lt;span style=&#34;color:#75715e&#34;&gt;//getFirst isn&amp;#39;t declared yet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;member&lt;/span&gt; this.&lt;span style=&#34;color:#a6e22e&#34;&gt;getFirst&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; firstTime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- /post/visibility-fsharp/ - CC by Attribution</description>
        </item>
    
    
    
        <item>
        <title>Create high quality renders of your Altium boards</title>
        <link>/post/render-altium/</link>
        <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
        
        <guid>/post/render-altium/</guid>
        <description>Asti&#39;s Notes /post/render-altium/ -&lt;h2 id=&#34;create-a-realistic-model&#34;&gt;Create a realistic model&lt;/h2&gt;
&lt;p&gt;Although this should be very straightforward, and while the 3D view in Altium is very accurate, getting it out of there is an entirely different story.&lt;/p&gt;
&lt;h2 id=&#34;step-1&#34;&gt;Step 1&lt;/h2&gt;
&lt;p&gt;This is, as you&amp;rsquo;d expect to export a STEP file from Altium.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;File &amp;gt; Export &amp;gt; STEP 3D&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/render-altium1.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Remember to export all 3D bodies as well. But you get no traces, silkscreen or pads in a STEP file.&lt;/p&gt;
&lt;p&gt;So on to the next step.&lt;/p&gt;
&lt;h2 id=&#34;step-2&#34;&gt;Step 2&lt;/h2&gt;
&lt;p&gt;Open the STEP file in Fusion 360 (or Keyshot - the process is similar)&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/render-altium2.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Make sure the main solids are free from errors, and there&amp;rsquo;s no z-fighting.&lt;/p&gt;
&lt;h2 id=&#34;step-3&#34;&gt;Step 3&lt;/h2&gt;
&lt;p&gt;In Altium, open &lt;code&gt;Page Setup&lt;/code&gt; and &lt;code&gt;Print Properties&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/render-altium31.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Right click any item and select &lt;code&gt;Preferences&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/render-altium32.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Set the Top Paste layer colour to gold, tin&lt;/li&gt;
&lt;li&gt;Set the Top Overlay colour to white&lt;/li&gt;
&lt;li&gt;Set the Top Solder colour to black or a darker colour&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remove the other layers, and set up a composite image in this order:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/render-altium33.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Print as a PDF. Convert to PNG or TIF.&lt;/p&gt;
&lt;h2 id=&#34;step-4&#34;&gt;Step 4&lt;/h2&gt;
&lt;p&gt;Import the image into Fusion 360 as a decal:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/render-altium4.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Select the top face. Make sure &lt;code&gt;Chain Faces&lt;/code&gt; is unchecked.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/render-altium41.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Move the decal into position.&lt;/p&gt;
&lt;h2 id=&#34;step-5&#34;&gt;Step 5&lt;/h2&gt;
&lt;p&gt;Open the Appearance tab, and map more accurate to the existing materials.&lt;/p&gt;
&lt;p&gt;You can do this by selecting a material, selecting all instances of it, and dragging a new material.&lt;/p&gt;
&lt;p&gt;Here I&amp;rsquo;m adding a polished gold material for the castellations.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/render-altium51.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Now set up some soft lighting , a solid environment color, and hit Render!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/images/render-altium5.jpg&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;And you should have something like this.&lt;/p&gt;
- /post/render-altium/ - CC by Attribution</description>
        </item>
    
    
  </channel>
</rss> 