<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>protobuf on Asti&#39;s Notes</title>
    <link>/tags/protobuf/</link>
    <description>Recent content in protobuf on Asti&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC by Attribution</copyright>
    <lastBuildDate>Sat, 03 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/protobuf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Decoding a oneof case in nanopb</title>
      <link>/post/nanopb-value/</link>
      <pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/nanopb-value/</guid>
      <description>Decoding callbacks Say you have a message type with variable fields:
message KeyValue { string key = 1; string value = 2;}This generates:
typedef struct _KeyValue {pb_callback_t key;pb_callback_t value;} KeyValue;Decoding this in nanopb isn&#39;t so bad -
KeyValue decodeKV(char* key, char* value){KeyValue kv;kv.key = readStringCallback(key);kv.value = readStringCallback(value);return kv;}Call pb_decode and you&#39;re done.
The callback and the union If your type happens to be inside a oneof like so:</description>
    </item>
    
  </channel>
</rss>