<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>optimization on Asti&#39;s Notes</title>
    <link>/tags/optimization/</link>
    <description>Recent content in optimization on Asti&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC by Attribution</copyright>
    <lastBuildDate>Mon, 30 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/optimization/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Invalid GC results in F# tests</title>
      <link>/post/fs-incorrect-gc/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/fs-incorrect-gc/</guid>
      <description>When running tests which check if something is GC&#39;d, it might fail.
The test Consider the following test:
[&amp;lt;TestMethod&amp;gt;]member _.TestGC() =let mutable obj = new Object()let weak = new WeakReference(obj);GC.Collect()Assert.IsTrue(obj &amp;lt;&amp;gt; null)Assert.IsTrue(weak.IsAlive) obj &amp;lt;- nullGC.Collect()Assert.IsTrue((obj = null))Assert.IsTrue(not weak.IsAlive)This will fail in DEBUG.
Sub-expression elaboration This happens because of elaboration to new locals for every subexpression. For example,
let list1 = [1; 2; 3]let list2 = [1; 2; 3]assert (list1 = list2)This elaborates every sub-expression to:</description>
    </item>
    
    <item>
      <title>Incorrect stack traces in F#</title>
      <link>/post/fsc-stacktrace/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/fsc-stacktrace/</guid>
      <description>Consider the following simple program:
let foo () =failwithf &amp;#34;foo&amp;#34;[&amp;lt;EntryPoint&amp;gt;]let main argv =foo ()0Pretty straightforward. But depending on the circumstances, you may never see that foo in the stack trace.
Unhandled Exception: System.Exception: fooat Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringThenFail@1639.Invoke(String message)at Program.main(String[] argv) in Program.fs:line 13And the reason for that is optimizations. For fsc, optimizations are turned on by default.
Inlining This is the most common thing you&#39;re likely to see.</description>
    </item>
    
  </channel>
</rss>