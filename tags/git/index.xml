<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Asti&#39;s Notes</title>
    <link>/tags/git/</link>
    <description>Recent content in git on Asti&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC by Attribution</copyright>
    <lastBuildDate>Mon, 17 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sync git modules to .gitmodules</title>
      <link>/post/powershell-git-sync/</link>
      <pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/powershell-git-sync/</guid>
      <description>.gitmodules is not git submodules A .gitmodules file is sort of indicative - it&#39;s not what actually is being tracked by Git. When you start a new project, and you have to include a bunch of submodules, you may think of starting off by copying and editing a .gitmodules file with all the submodules you want, but that literally does nothing.
You&#39;ll find out that you have to git submodule add everything by hand.</description>
    </item>
    
    <item>
      <title>Run a PowerShell script for every .NET application crash</title>
      <link>/post/powershell-tasks/</link>
      <pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/powershell-tasks/</guid>
      <description>How do you run a script for every application crash without attaching the debugger or some complicated mess? It&#39;s easy enough to write a simple script which checks for the life of the process.
while($(ps taskmgr*) -ne $null) {sleep 1 }echo &amp;#34;It&amp;#39;s dead, Jim!&amp;#34;But that doesn&#39;t give us the stack-trace, plus this script has to have a longer life-time than the process you&#39;re monitoring.
Enter The Event Log An application crash with an unhandled exception always writes to the Application event log.</description>
    </item>
    
  </channel>
</rss>