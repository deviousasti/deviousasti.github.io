<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>eventsourcing on Asti&#39;s Notes</title>
    <link>/tags/eventsourcing/</link>
    <description>Recent content in eventsourcing on Asti&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC by Attribution</copyright>
    <lastBuildDate>Sat, 18 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/eventsourcing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Contracts for Event Sourced Systems with FsCodec</title>
      <link>/post/fscodec/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/fscodec/</guid>
      <description>Contracts for Event Sourced Systems with FsCodec FsCodec is an opinionated library for working with contracts in event sourced systems in F#. At its core, it&amp;rsquo;s a set of custom JSON serializers for two backends Newtonsoft.Json (NSJ) or System.Text.Json (STJ).
Normally a higher level system like Propulsion or Equinox will handle this for you - but if you just want contract encoding/decoding, we can directly use FsCodec which is plenty high-level.</description>
    </item>
    
  </channel>
</rss>
