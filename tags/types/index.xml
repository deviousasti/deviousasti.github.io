<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>types on Asti&#39;s Notes</title>
    <link>/tags/types/</link>
    <description>Recent content in types on Asti&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC by Attribution</copyright>
    <lastBuildDate>Tue, 18 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/types/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A DOS-like shell in .Net</title>
      <link>/post/recreate-dos/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/recreate-dos/</guid>
      <description>Setup Add a reference to NetShell, create a new DOS.cs file. The main file just calls NetShell&#39;s RpcShell with an instance of DOS.
static int Main(string[] args){var shell = new RpcShell(new DOS()) { Prompt = Environment.CurrentDirectory, FlagPrefix = &amp;#34;/&amp;#34; };return shell.Run();}With that out of the way, let&#39;s implement the first command.
echo This is trivial. Add a Command attribute with the (optional) name and help-text.</description>
    </item>
    
    <item>
      <title>A git-config parser</title>
      <link>/post/git-config-parser/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/git-config-parser/</guid>
      <description>Reading .git/config is the fastest way of getting info on a repository and its dependencies.
The Spec Let&#39;s start by going through the spec from https://git-scm.com/docs/git-config#_syntax
An example config:
# Core variables[core]; Don&#39;t trust file modesfilemode = false# Our diff algorithm[branch &amp;quot;master&amp;quot;]	use = trueThe basics:
 The # and ; characters begin comments to the end of line, blank lines are ignored.
 let isComment (line:string) = line.</description>
    </item>
    
    <item>
      <title>Visibility in F#</title>
      <link>/post/visibility-fsharp/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/visibility-fsharp/</guid>
      <description>let vs. member assignments What&#39;s the difference between writing let in a type vs. writing member?
For starters, there&#39;s not a huge difference.
type Test () =let mutable lastTime = DateTime.MinValueis equivalent to:
public class Test{internal DateTime lastTime = DateTime.MinValue;}let mutable resolves to an internal field.
As you may already know,
type Test () =let firstTime = DateTime.MinValuealways stays in the scope of the constructor, unless referenced outside.</description>
    </item>
    
    <item>
      <title>A purely functional definition of Sets</title>
      <link>/post/fs-sets/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/fs-sets/</guid>
      <description>What would a defintion of classic sets in F# look like. These would just be composed of functions, without any underlying data types.
The simplesy defintion of a Set is a boundary - everything inside it belongs to the set, everything outside it does not. We can define that membership using a simple function type.
type &amp;#39;a Set = &amp;#39;a -&amp;gt; booltrue for a value that belongs to the set and false otherwise.</description>
    </item>
    
    <item>
      <title>Web Workers and Typescript constraints</title>
      <link>/post/ts-worker-constraints/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/ts-worker-constraints/</guid>
      <description>Now there are a million web-worker libraries out there, but what&#39;s the harm in having more interesting implementations?
The Proxy The simplest way to start using a worker would be something that can drop in and sub for a regular class with methods and state.
We can do that by creating a proxy for the class - you call the methods on the proxy - the calls are intercepted and run in the worker, and the results are passed to you as a Promise.</description>
    </item>
    
  </channel>
</rss>